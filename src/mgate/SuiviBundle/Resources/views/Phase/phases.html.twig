{% extends "mgateSuiviBundle::layout.html.twig" %}

{% block content_bundle %}


<style>
       textarea{
         width: 95%;
         height: 100%;
         resize:vertical;
         }
         select{
         width: 98%;
         }

</style>

<h2>Modifier les {{ form.phases | length  }} phases</h2>
<form method="POST" {{ form_enctype(form) }}>
    {# affiche l'unique champ de la tache : description #}
    {#{ form_row(form.description) }#}

<p><input type="submit" value="Ajouter une phase" name="add" class="btn btn-info"/>
 - <input type="submit" value="Enregistrer les phases" class="btn btn-default"/></p>

        {# itere sur chaque tag existant et affiche son unique champ : name #}
            <div class="row phases" id="phases" data-prototype="{{ form_widget(form.phases.vars.prototype) | e }}">
        {# itere sur chaque tag existant et affiche son unique champ : name #}
        {% for phase in form.phases %}

                <div class="col-md-6">
                    <table class="table table-striped table-bordered">
                        <tr>
                            <th colspan="2"><div class="btn-group"></div>       <span class="titrePhase"></span> {{  form_widget(phase.position)}}</th>
                        </tr>
                        <tr>
                            <th>{{  form_label(phase.groupe)}}</th>
                            <td>{{  form_widget(phase.groupe)}}</td>
                        </tr>
                        <tr>
                            <th>Titre</th>
                            <td>{{  form_widget(phase.titre)}}</td>
                        </tr>
                        <tr>
                            <th>Objectifs</th>
                            <td>{{ form_widget(phase.objectif)}}</td>
                        </tr>
                        <tr>
                            <th>Méthodologie</th>
                            <td>{{ form_widget(phase.methodo)}}</td>
                        </tr>
                        <tr>
                            <th>Nombre JEH</th>
                            <td>{{ form_widget(phase.nbrJEH)}}</td>
                        </tr>
                        <tr>
                            <th>Prix JEH HT Facturé (€)</th>
                            <td>{{ form_widget(phase.prixJEH)}}</td>
                        </tr>
                        <tr>
                            <th>Date de Debut</th>
                            <td>{{ form_widget(phase.dateDebut)}}</td>
                        </tr>
                        <tr>
                            <th>Delai (Jours)</th>
                            <td>{{ form_widget(phase.delai)}}</td>
                        </tr>
                        <tr>
                            <th>Prix Phase</th>
                            <td><span class="prixPhase{{ phase.vars.name }}">//</span></td>
                        </tr>
                    </table>
                </div>
        {% endfor %}
            </div>

    <br />
      {{ form_rest(form) }}

<p><input type="submit" value="Ajouter une phase" name="add" class="btn btn-info"/>
 - <input type="submit" value="Enregistrer les phases" class="btn btn-default" /></p>

</form>

<a href="{{ path('mgateSuivi_etude_voir', {'numero': etude.numero}) }}">Retour à l'étude</a>


<div id="dialog" title="Aide au chiffrage">
    <p>Nombre de JEH:<span class="nbrJEH">//</span></p>
    <p>Prix sans les frais:<span class="prix">//</span>€ HT</p>
    <p><button id="myButtonUpdate">Rafraichir</button></p>
</div>

{% endblock %}

{% block javascript %}
    {{ parent() }}
    {{ form_javascript(form) }}

<script type="text/javascript">

    // Fenetre resumant
    $.ui.dialog.prototype._oldinit = $.ui.dialog.prototype._init;
    $.ui.dialog.prototype._init = function() {
        $(this.element).parent().css('position', 'fixed');
        $(this.element).dialog("option",{
            resizeStop: function(event,ui) {
                var position = [(Math.floor(ui.position.left) - $(window).scrollLeft()),
                                (Math.floor(ui.position.top) - $(window).scrollTop())];
                $(event.target).parent().css('position', 'fixed');
                $(event.target).parent().dialog('option','position',position);
                return true;
            }
        });
        this._oldinit();
    };
    $(function() {
        $( "#dialog" ).dialog({
            position: {
                  my: 'right center',
                  at: 'right center'
            },
            height:  $(window).height() * 0.17,
            width:  $(window).width() * 0.25
        });
    });

    // Recupere le div qui contient la collection de tags
    var collectionHolder = $('.phases');

    function updateOrder() {
        $('input.position').each(function(i) {
            $(this).val( i );
        });
        $('.titrePhase').each(function(i) {
            $(this).text( 'Phase n°'+(i+1) );
        });
    }

    function updatePrix() {
        var prix = 0;
        var phase = 0;

        $('input.nbrJEH').each(function(i1) {
            phase=parseInt($(this).val());

            $('input.prixJEH').each(function(i2) {
                if(i1==i2)
                phase*=parseInt($(this).val());
            });
            if(!isNaN(phase))
            {
                prix+=phase;
                $('.prixPhase'+i1).text( phase );
            }
        });

       $('.prix').text( prix );
    }

    function updateNbrJEH() {
        var nbrJEH = 0;

        $('input.nbrJEH').each(function(i) {
            if(!isNaN(parseInt($(this).val())))
                nbrJEH+=parseInt($(this).val());
        });

       $('.nbrJEH').text( nbrJEH );
    }

    var isDirty = false;

    jQuery(document).ready(function() {

        updateOrder();
        updatePrix();
        updateNbrJEH();

        //Verification avant de quitter
        $(':input').change(function(){
            if(!isDirty){
               isDirty = true;
            }
        });
        $(window).bind('beforeunload', function(){
            if(isDirty)
                return "Do you really want to leave now?";
        });
        $('form').submit(function() {
            isDirty = false;
            return true;
        });

        //Rajout des boutons (X, up, down) pour les phases
        collectionHolder.find('div').each(function() {
            addPhaseBouton($(this));
        });

        //Ajouter le drag and drop
        {# $("#phases").dragsort({ dragSelector: "li", dragBetween: true, dragEnd: updateOrder, placeHolderTemplate: "<div class='col-md-6'></div>" }); #}
        collectionHolder.sortable({
            // limitons les deplacements sur l'axe des ordonnees, ce sera plus propre

            // Il faut cliquer sur cet element pour pouvoir initier le drag'n'drop
            //handle: '.sort-button',

            // Creons un joli trou style lors des deplacements
            //placeholder: 'ui-state-highlight',
            //forcePlaceholderSize: true,

            // Cette fonction permet a  notre ligne de conserver son formatage lors du deplacement
            // Pas vraiment utile, mais plus agreable
            helper: function(e, tr)
            {
              var $originals = tr.children();
              var $helper = tr.clone();
              $helper.children().each(function(index)
              {
                // Set helper cell sizes to match the original sizes
                $(this).width($originals.eq(index).width())
              });
              return $helper;
            },

            // La fonction appele quand un element change de position
            // C'est le code vraiment utile, en fait
            update: function(){
                updateOrder();
            }

        });


        $('input.nbrJEH').each(function() {
            $(this).change(function() {
                updatePrix();
                updateNbrJEH();
            });
        });

        $('input.prixJEH').each(function() {
            $(this).change(function() {
                updatePrix();
            });
        });

       $('#myButtonUpdate').on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            updatePrix();
            updateNbrJEH();
        });



    });

    function addPhaseBouton($tagFormLi) {
        var $delete = $('<button id="myButtonDelete" class="btn">X</button>');
        var $up = $('<button id="myButtonUp" class="btn">▲</button>');
        var $down = $('<button id="myButtonDown" class="btn">▼</button>');
        $tagFormLi.children().children().children().children().children().first().append($delete);
        $tagFormLi.children().children().children().children().children().first().append($up);
        $tagFormLi.children().children().children().children().children().first().append($down);

        $delete.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            //CONFIRM confirmation suppression
            var message = "Êtes vous sûr de vouloir supprimer cette phase ?";
            bootbox.confirm(message, function(result) {
                if (result) {
                                // remove the li for the tag form
                    $tagFormLi.remove();
                    updateOrder();
                    updatePrix();
                    updateNbrJEH();
                }
            });
           });

        $up.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            $tagFormLi.prev().before($tagFormLi);
            updateOrder();
        });
        $down.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            $tagFormLi.next().after($tagFormLi);
            updateOrder();
        });
    }

</script>


{% endblock %}
